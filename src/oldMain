package view;


import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import model.*;

import java.util.ArrayList;
import java.util.Random;

public class PentagoMain extends Application {
    /** A constant for the font of header text. */
    private final Font HEADER_FONT = Font.font("Century Gothic", FontWeight.NORMAL, 20);
    private final Background HOVER_BACKGROUND = new Background(new BackgroundFill(Color.GRAY, CornerRadii.EMPTY, Insets.EMPTY));
    private final Background DEFAULT_BACKGROUND = new Background(new BackgroundFill(Color.LIGHTGRAY, CornerRadii.EMPTY, Insets.EMPTY));

    /** The scenes width. */
    private final int SCENE_WIDTH = 650;

    /** The scenes height. */
    private final int SCENE_HEIGHT = 600;

    /** The tab pane to hold all the tabs. */
    private final TitledPane mainPane = new TitledPane();

    /** The the pieces size. */
    private static final int        PIECE_SIZE = 80;


    private ArrayList<FlowPane> quads;

    private double                  mouseDragStartX;
    private double                  mouseDragEndX;

    /** The main screen to hold all the applications GUI features. */
    private Stage mainScreen;
    private int playerNumber;
    private int aiNumber;
    private Text playerFirst;
    private FlowPane boardPane;
    private BorderPane gamePane;

    @Override
    public void start(Stage primaryStage) throws Exception {
        mainScreen = primaryStage;
        gamePane = new BorderPane();
        boardPane = new FlowPane();
        quads = new ArrayList<>();
        quads.add(new FlowPane());
        quads.add(new FlowPane());
        quads.add(new FlowPane());
        quads.add(new FlowPane());

        mainScreen.setTitle("Pentago");
        mainScreen.setScene(new Scene(getMainPane(), SCENE_WIDTH, SCENE_HEIGHT));
        mainScreen.setResizable(false);
        mainScreen.show();

    }

    public GridPane getMainPane() {
        GridPane main = new GridPane();

        GridPane setUpPane = new GridPane();
        setUpPane.setAlignment(Pos.CENTER);
        setUpPane.setVgap(10);
        setUpPane.setHgap(10);
        setUpPane.setPadding(new Insets(25));
        // Header
        Text setUpMessage = new Text("Setup Game");
        setUpMessage.setFont(HEADER_FONT);

        // Player name
        Label playerLabel = new Label("Your Name:");
        TextField playerName = new TextField();

        setUpPane.add(setUpMessage, 0, 0, 2, 1);
        setUpPane.add(playerLabel, 0, 1);
        setUpPane.add(playerName, 1, 1);


        // pieces
        Label pieceLabel = new Label("Your game piece:");

        ToggleGroup pieceGroup = new ToggleGroup();
        RadioButton pieceW = new RadioButton("White");
        RadioButton pieceB = new RadioButton("Black");
        pieceW.setToggleGroup(pieceGroup);
        pieceW.setGraphic(buildIcon("./view/whitePiece.png"));

        pieceB.setToggleGroup(pieceGroup);
        pieceB.setGraphic(buildIcon("./view/blackPiece.png"));


        pieceW.setSelected(true);

        setUpPane.add(pieceLabel, 0, 2);
        setUpPane.add(pieceW, 1, 2);
        setUpPane.add(pieceB, 1, 3);

        // order
        Label orderLabel = new Label("Do you want to be the:");
        ToggleGroup order = new ToggleGroup();
        RadioButton firstPlayer = new RadioButton("First Player");
        RadioButton secondPlayer = new RadioButton("Second Player");
        RadioButton random = new RadioButton("You decide! (Random)");
        firstPlayer.setToggleGroup(order);
        secondPlayer.setToggleGroup(order);
        random.setToggleGroup(order);
        random.setSelected(true);

        setUpPane.add(orderLabel, 0, 4);
        setUpPane.add(firstPlayer, 1, 5);
        setUpPane.add(secondPlayer, 1, 6);
        setUpPane.add(random, 1, 7);

        // Ai
        Label aiLabel = new Label("Ai:");
        ToggleGroup ai = new ToggleGroup();
        RadioButton miniMax = new RadioButton("MiniMax");
        RadioButton alphaBeta = new RadioButton("Alphabeta");
        miniMax.setToggleGroup(ai);
        alphaBeta.setToggleGroup(ai);
        miniMax.setSelected(true);

        setUpPane.add(aiLabel, 0, 8);
        setUpPane.add(miniMax, 1, 9);
        setUpPane.add(alphaBeta, 1, 10);

        Button startButton = new Button("Start Game");
        startButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                setUpGame(playerName.getText(),
                        pieceGroup.getSelectedToggle(),
                        order.getSelectedToggle(), ai.getSelectedToggle());
            }
        });

        setUpPane.add(startButton, 1, 11);
        main.add(setUpPane, 0, 1);
        return main;
    }

    private void setUpGame(String name, Toggle piece, Toggle order, Toggle ai) {
        Player currentPlayer;
        Player aiPlayer;
        char aiPiece;
        if(piece.toString().contains("Black")) {
            currentPlayer = new Player(name, 'B');
            aiPiece = 'W';
        } else {
            currentPlayer = new Player(name, 'W');
            aiPiece = 'B';
        }

        if(ai.toString().contains("MiniMax")) {
            // default depth 2
            aiPlayer = new AiPlayer("Com", aiPiece, 2, false);
        } else {
            aiPlayer = new AiPlayer("Com", aiPiece, 2, true);
        }


        PentagoGame game = new PentagoGame();

        if(order.toString().contains("First Player")) {
            game.setPlayer(1, currentPlayer);
            playerNumber = 1;
            aiNumber = 2;
            game.setPlayer(2, aiPlayer);
            game.setAiPlayer(2);
        } else if(order.toString().contains("Second Player")) {
            game.setPlayer(2, currentPlayer);
            playerNumber = 2;
            aiNumber = 1;
            game.setPlayer(1, aiPlayer);
            game.setAiPlayer(1);
        } else { // random
            Random ran = new Random();
            int i = ran.nextInt(2) + 1;
            if(i == 1) {
                game.setPlayer(1, currentPlayer);
                playerNumber = 1;
                aiNumber = 2;
                game.setPlayer(2, aiPlayer);
                game.setAiPlayer(2);
            } else {
                game.setPlayer(2, currentPlayer);
                playerNumber = 2;
                aiNumber = 1;
                game.setPlayer(1, aiPlayer);
                game.setAiPlayer(1);
            }
        }

        initialize(game);
        playGame(game);
    }

    private void playGame(PentagoGame game) {
        gamePane.setPadding(new Insets(25,25,25,25));

        playerFirst = new Text(game.getPlayer(game.whoGoesFirst()) + " goes first!");
        playerFirst.setFont(HEADER_FONT);

        Button restartButton = new Button("Restart Game");
        restartButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                mainScreen.setScene(new Scene(getMainPane(), SCENE_WIDTH, SCENE_HEIGHT));
            }
        });

        gamePane.setTop(playerFirst);
        gamePane.setCenter(boardPane);
        gamePane.setBottom(restartButton);

        mainScreen.setScene(new Scene(gamePane, SCENE_WIDTH, SCENE_HEIGHT));

        startGame(game);
    }

    private void startGame(PentagoGame game) {
        updateGame(game);

        while(!game.gameOver()) {
            if (game.gameOver()) {
                playerFirst.setText("GAME OVER!");
                setGameOver();
            }

            if (game.isAiTurn()) {
                // its the ai turn.
                playerFirst.setText("Its " + game.getPlayer(game.whosTurn()).getName()
                        + " turn!\nThinking...");

                Move aiMove = ((AiPlayer) game.getPlayer(aiNumber)).getMove(game);
                System.out.println(aiMove);
                game.playPiece(game.whosTurn(), aiMove);
                if (game.gameOver()) {
                    playerFirst.setText("GAME OVER!");
                    setGameOver();
                }
                game.rotateBoard(aiMove);
                game.turnOver(game.whosTurn());
            } else {
                while (game.whosTurn() == playerNumber) {
                    // wait for user to play (i.e. click on things)
                }
                game.turnOver(game.whosTurn());
            }

            updateGame(game);
            playerFirst.setText("Its " + game.getPlayer(game.whosTurn()).getName() + " turn!");
        }
    }

    private static ImageView buildIcon(String path) {
        Image i = new Image(path);
        ImageView imageView = new ImageView();
        // You can set width and height
        imageView.setFitHeight(PIECE_SIZE);
        imageView.setFitWidth(PIECE_SIZE);
        imageView.setImage(i);
        return imageView;
    }

    /** ------------------------------- **
     *   Board Display                  *
     *  --------------------------------*/

    private void initialize(PentagoGame game) {
        boardPane.getChildren().clear();
        PentagoBoard board = game.getPentagoBoard();
        int boardSize = board.getBoardSize();

        int quad;
        char piece;
        for(FlowPane f : quads) {
            f.setPrefWrapLength(3 * PIECE_SIZE);
            f.setBackground(DEFAULT_BACKGROUND);
        }

        for(int i = 0; i < boardSize; i++) {
            for(int j = 0; j < boardSize; j++) {
                quad = board.getQuadrantAtLocation(i,j);
                piece = board.getCharAtLocation(i,j);
                if(quad == 0) {
                    quads.get(quad).getChildren().add(new PentagoBoardTile(game, piece, i, j));
                } else if(quad == 1) {
                    quads.get(quad).getChildren().add(new PentagoBoardTile(game, piece, i, j));
                } else if(quad == 2) {
                    quads.get(quad).getChildren().add(new PentagoBoardTile(game, piece, i, j));
                } else {
                    quads.get(quad).getChildren().add(new PentagoBoardTile(game, piece, i, j));
                }
            }
        }

        boardPane.setPrefWrapLength(boardSize * PIECE_SIZE);
        boardPane.setPrefSize(boardSize * PIECE_SIZE,boardSize * PIECE_SIZE);

        for(FlowPane f : quads) {
            boardPane.getChildren().add(f);
        }
        setHovers(game);
        setDragListeners(game);
    }

    public void setGameOver() {
        for(FlowPane f: quads) {
            f.removeEventHandler(MouseEvent.MOUSE_PRESSED, f.getOnMousePressed());
        }
    }

    public void updateGame(PentagoGame game) {
        initialize(game);
    }

    private void setDragListeners(PentagoGame game) {
        for(int i = 0; i < quads.size(); i++ ) {
            quads.get(i).setOnMousePressed(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent mouseEvent) {
                    mouseDragStartX = mouseEvent.getX();
                    mouseEvent.consume();
                }
            });

            quads.get(i).setOnMouseReleased(new EventHandler<MouseEvent>() {
                public void handle(MouseEvent mouseEvent) {
                    mouseDragEndX = mouseEvent.getX();
                    if(game.hasPlacedPiece() && !game.isAiTurn()) {
                        int board = quads.indexOf((FlowPane) mouseEvent.getSource());
                        game.turnOver(game.whosTurn());
                        game.rotateBoard(new Move(0,0, board, draggedLeft()));
                    }
                }
            });
        }
    }


    private boolean draggedLeft() {
        return mouseDragStartX > mouseDragEndX;
    }

    private void setHovers(PentagoGame game) {
        for(FlowPane f : quads) {
            f.setOnMouseEntered(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    if(game.hasPlacedPiece() && !game.isAiTurn()) {
                        f.setBackground(HOVER_BACKGROUND);
                    }
                }
            });
            f.setOnMouseExited(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    if(game.hasPlacedPiece() && !game.isAiTurn()) {
                        f.setBackground(DEFAULT_BACKGROUND);
                    }
                }
            });
        }
    }




}
